import re
import graphviz
from pyparsing import Word, alphas, nums, Literal, ZeroOrMore, Forward, Group, alphanums, opAssoc, infixNotation

# Definir la lista de palabras clave y tokens para el análisis léxico
PALABRAS_CLAVE_PYTHON = r'\bif\b|\belse\b|\bwhile\b|\bfor\b|\breturn\b|\bprint\b|\binput\b|\bdef\b|\bclass\b|\bimport\b|\bas\b|\bfrom\b|\bpass\b|\bcontinue\b|\bbreak\b|\band\b|\bor\b|\bnot\b|\bin\b|\bis\b|\bNone\b|\bTrue\b|\bFalse\b|\blambda\b|\bwith\b|\btry\b|\bexcept\b|\braise\b|\bfinally\b|\bdel\b|\bglobal\b|\bnonlocal\b|\byield\b|\basync\b|\bawait\b'

ESPECIFICACION_TOKENS = [
    ('PALABRA_CLAVE', PALABRAS_CLAVE_PYTHON),
    ('LITERAL_NUMERICO', r'\d+(\.\d*)?'),
    ('LITERAL_CADENA', r'f?"[^"\n]*"|f?\'[^\'\n]*\''),
    ('IDENTIFICADOR', r'[A-Za-z_]\w*'),
    ('OPERADOR', r'[+\-*/%]|==|!=|<=?|>=?|&&|\|\|'),
    ('ASIGNACION', r'='),
    ('DELIMITADOR', r'[(){},;]'),
    ('COMENTARIO_LINEA', r'//[^\n]*|#[^\n]*'),
    ('COMENTARIO_BLOQUE', r'/\*.*?\*/'),
    ('NUEVALINEA', r'\n'),
    ('IGNORAR', r'[ \t]+'),
    ('ERROR', r'.')
]

token_re = re.compile('|'.join(f'(?P<{nombre}>{patron})' for nombre, patron in ESPECIFICACION_TOKENS))

def analizar_lexico(codigo):
    num_linea, inicio_linea = 1, 0
    tokens = {}
    errores = []

    for mo in token_re.finditer(codigo):
        tipo, valor, columna = mo.lastgroup, mo.group(), mo.start() - inicio_linea
        if tipo == 'LITERAL_NUMERICO':
            valor = float(valor) if '.' in valor else int(valor)
        elif tipo == 'NUEVALINEA':
            num_linea, inicio_linea = num_linea + 1, mo.end()
            continue
        elif tipo in {'IGNORAR', 'COMENTARIO_LINEA', 'COMENTARIO_BLOQUE'}:
            continue
        elif tipo == 'ERROR':
            errores.append(f'Error léxico: Caracter {valor!r} en línea {num_linea}, columna {columna + 1}')
        else:
            tokens.setdefault(tipo, []).append((valor, num_linea))

    return tokens, errores

# Definir tokens básicos para el parser
identificador = Word(alphas + '_', alphanums + '_')
numero = Word(nums)
operador = Literal('+') | Literal('-') | Literal('*') | Literal('/') | Literal('==') | Literal('>') | Literal('<')
asignacion = Literal('=')

# Definir una expresión aritmética o booleana usando notación infija
expresion = Forward()
expresion <<= infixNotation(identificador | numero, [(operador, 2, opAssoc.LEFT)])

# Definir una sentencia de asignación
asignacion_expr = identificador + asignacion + (expresion | numero | identificador)

# Definir una estructura para "if"
bloque_if = Group(Literal('if') + Literal('(') + expresion + Literal(')') + Group(asignacion_expr))

# Análisis Sintáctico
def analizar_sintactico(codigo_fuente):
    try:
        ast = bloque_if.parseString(codigo_fuente)
        return ast.asList()
    except Exception as e:
        return f'Error sintáctico: {str(e)}'

# Visualización del AST
def dibujar_ast(nodo, nombre='AST'):
    grafo = graphviz.Digraph(nombre)
    
    def recorrer(nodo, padre=None):
        if isinstance(nodo, list):
            for i, valor in enumerate(nodo):
                nodo_id = f'{id(valor)}_{i}'
                grafo.node(nodo_id, str(valor))
                if padre:
                    grafo.edge(padre, nodo_id)
                recorrer(valor, nodo_id)
        else:
            nodo_id = f'{id(nodo)}'
            grafo.node(nodo_id, str(nodo))
            if padre:
                grafo.edge(padre, nodo_id)

    recorrer(nodo)
    return grafo

# Análisis semántico
def analizar_semantico(ast):
    variables_definidas = set()
    errores_semanticos = []

    def revisar_nodo(nodo):
        if isinstance(nodo, list):
            if nodo[0] == 'if':  # Si es un bloque if
                condicion = nodo[2]
                revisar_nodo(condicion)
                cuerpo = nodo[3]
                revisar_nodo(cuerpo)
            elif len(nodo) == 3 and nodo[1] == '=':  # Si es una asignación
                variable = nodo[0]
                valor = nodo[2]
                variables_definidas.add(variable)  # Variable definida
                if isinstance(valor, str) and valor not in variables_definidas:
                    errores_semanticos.append(f'Variable no definida: {valor}')
        elif isinstance(nodo, str) and nodo not in variables_definidas:
            errores_semanticos.append(f'Variable no definida: {nodo}')

    revisar_nodo(ast)

    return errores_semanticos

# Función para ingresar el código fuente
def ingresar_codigo_fuente():
    print("Introduce el código fuente (termina con dos saltos de línea):")
    lineas, saltos_de_linea = [], 0
    while True:
        linea = input()
        if linea == '':
            saltos_de_linea += 1
        else:
            saltos_de_linea = 0
        if saltos_de_linea == 2:
            break
        lineas.append(linea)
    return '\n'.join(lineas)

# Función principal
def analizar_con_reintento():
    while True:
        codigo_fuente = ingresar_codigo_fuente()

        # Análisis léxico
        tokens, errores_lexicos = analizar_lexico(codigo_fuente)
        
        # Mostrar tokens
        for tipo, valores in tokens.items():
            valores_agrupados = {}
            for valor, linea in valores:
                valores_agrupados.setdefault(valor, []).append(linea)
            print(f'{tipo.replace("_", " ").capitalize()}:', ', '.join(f'{valor} (líneas: {", ".join(map(str, sorted(lineas)))})'
                                             for valor, lineas in valores_agrupados.items()))

        # Mostrar errores léxicos
        if errores_lexicos:
            print("\nErrores léxicos encontrados:")
            for error in errores_lexicos:
                print(error)

        # Análisis sintáctico
        print("\nAnalizando sintácticamente...")
        ast = analizar_sintactico(codigo_fuente)
        if isinstance(ast, str):
            print(ast)
        else:
            print("Árbol de Sintaxis Abstracta (AST):", ast)

            # Visualizar el AST
            ast_grafo = dibujar_ast(ast)
            ast_grafo.view()

            # Análisis semántico
            errores_semanticos = analizar_semantico(ast)
            if errores_semanticos:
                print("\nErrores semánticos encontrados:")
                for error in errores_semanticos:
                    print(error)
            else:
                print("\nAnálisis semántico completado con éxito. No se encontraron errores.")

        # Preguntar si el usuario quiere intentar nuevamente
        if not errores_lexicos and not isinstance(ast, str) and not errores_semanticos:
            print("Análisis completado con éxito.")
            break
        else:
            print("\nVuelve a intentarlo.\n")

# Prueba del analizador
if __name__ == "__main__":
    analizar_con_reintento()
